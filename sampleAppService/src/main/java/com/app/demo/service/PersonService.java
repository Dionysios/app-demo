/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/manager/Manager.e.vm.java
 */
package com.app.demo.service;

import java.util.List;

import com.app.demo.dao.support.SearchTemplate;
import com.app.demo.domain.Person;
import com.app.demo.service.support.GenericEntityService;

/**
 * The PersonService is a data-centric service for the {@link Person} entity.
 * It provides the expected methods to get/delete a {@link Person} instance
 * plus some methods to perform searches.
 * <p>
 * Search logic is driven by 2 kinds of parameters: a {@link Person} instance used
 * as a properties holder against which the search will be performed and a {@link SearchTemplate}
 * instance from where you can control your search options including the usage
 * of named queries.
 */
public interface PersonService extends GenericEntityService<Person, String> {

    /**
     * Return the persistent instance of {@link Person} with the given unique property value username,
     * or null if there is no such persistent instance.
     *
     * @param username the unique value
     * @return the corresponding {@link Person} persistent instance or null
     */
    Person getByUsername(String username);

    /**
     * Delete a {@link Person} using the unique column username
     *
     * @param username the unique value
     */
    void deleteByUsername(String username);

    /**
     * Return the persistent instance of {@link Person} with the given unique property value email,
     * or null if there is no such persistent instance.
     *
     * @param email the unique value
     * @return the corresponding {@link Person} persistent instance or null
     */
    Person getByEmail(String email);

    /**
     * Delete a {@link Person} using the unique column email
     *
     * @param email the unique value
     */
    void deleteByEmail(String email);
    
    /**
     * Load all the Person with Association based on the passed Person and SearchTemplate.
     *
     * @param person , searchTemplate 
     * @return the list of matching entities or an empty list when no entity is found.
     */
    public List<Person> findPersonsWithAssociation(Person person,
			SearchTemplate searchTemplate) ;
    
    /**
     *@Transactional(readOnly=true)
     *Load all the entities based on the passed exampleOrNamedQueryParameters and SearchTemplate.
     *
     * @param person searchTemplate
     * @return the list of matching entities or an empty list when no entity is found.
     */
    public Person getPersonWithAssociation(Person person);
    
    public List<Person> findWithAssociation(Person person, SearchTemplate searchTemplate);
}