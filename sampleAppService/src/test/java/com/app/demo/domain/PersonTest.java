/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/test/java/domain/ModelTest.e.vm.java
 */
package com.app.demo.domain;

import java.io.*;
import java.util.*;

import static org.junit.Assert.*;
import org.junit.Test;

import com.app.demo.util.*;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.EnumType.STRING;
import static javax.persistence.TemporalType.TIMESTAMP;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQuery;
import javax.persistence.QueryHint;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;
import com.app.demo.domain.Role;
import com.app.demo.domain.enums.CivilityEnum;

import com.app.demo.domain.enums.CivilityEnum;

/**
 * Basic tests for Person
 */
public class PersonTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        Person model = new Person();
        assertFalse(model.isIdSet());
    }

    @Test
    public void isIdSetReturnsTrue() {
        Person model = new Person();
        model.setId(ValueGenerator.getUniqueString(32));
        assertNotNull(model.getId());
        assertTrue(model.isIdSet());
    }

    // test columns methods

    //-------------------------------------------------------------
    // Pure Many to Many
    //-------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Test
    public void manyToMany_addRole() {
        Person many1 = new Person();
        Role many2 = new Role();

        // add it
        many1.addRole(many2);

        // check it is propagated
        assertTrue(many1.containsRole(many2));
        // now let's remove it
        many1.removeRole(many2);

        // check it is propagated
        assertFalse(many1.containsRole(many2));
    }

    @Test
    public void toStringNotNull() {
        Person model = new Person();
        assertNotNull(model.toString());
    }

    @Test
    public void equalsUsingBusinessKey() {
        Person model1 = new Person();
        Person model2 = new Person();
        String email = ValueGenerator.getUniqueEmail();
        model1.setEmail(email);
        model2.setEmail(email);
        assertTrue(model1.equals(model2));
        assertTrue(model2.equals(model1));
        assertTrue(model1.hashCode() == model2.hashCode());
    }
}