/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/domain/Entity.e.vm.java
 */
package com.app.demo.domain;

import javax.xml.bind.annotation.XmlTransient;

import static javax.persistence.EnumType.STRING;
import static javax.persistence.TemporalType.TIMESTAMP;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQuery;
import javax.persistence.QueryHint;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;

import com.app.demo.dao.hibernate.AuditableDate;
import com.app.demo.domain.Role;
import com.app.demo.domain.enums.CivilityEnum;

@Entity
@Table(name = "person")
@NamedQuery(name = "Person.selectAll", query = "from com.app.demo.domain.Person as person where 1 = 1", hints = {
        @QueryHint(name = "org.hibernate.comment", value = "enableDynamicOrderBySupport"),
        @QueryHint(name = "org.hibernate.cacheable", value = "true") })
@Cache(usage = NONSTRICT_READ_WRITE)
@FilterDef(name = "myPersonFilter", defaultCondition = "ID = :currentAccountId ", parameters = @ParamDef(name = "currentAccountId", type = "org.hibernate.type.StringType"))
@Filter(name = "myPersonFilter")
public class Person extends Default implements AuditableDate,Identifiable<String>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(Person.class);

    // Raw attributes
    private String id; // pk
    private String username; // unique (not null)
    private String password; // not null
    private String email; // unique (not null)
    private Boolean isEnabled;
    private CivilityEnum civility;
    private String firstName;
    private String lastName;
    private String photo64;
    private Date birthDate; // not null

    // Many to many
    private List<Role> roles = new ArrayList<Role>();

    // ---------------------------
    // Constructors
    // ---------------------------

    public Person() {
    }

    public Person(String primaryKey) {
        setId(primaryKey);
    }

    // -------------------------------
    // Role names support
    // -------------------------------

    /**
     * Returns the granted authorities for this user. You may override
     * this method to provide your own custom authorities.
     */
    @Transient
    @XmlTransient
    public List<String> getRoleNames() {
        List<String> roleNames = new ArrayList<String>();

        for (Role role : getRoles()) {
            roleNames.add(role.getRoleName());
        }

        return roleNames;
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [id] ------------------------

    @Column(name = "ID", length = 32)
    @GeneratedValue(generator = "strategy-uuid")
    @GenericGenerator(name = "strategy-uuid", strategy = "uuid")
    @Id
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @Transient
    public boolean isIdSet() {
        return id != null && !id.isEmpty();
    }

    // -- [username] ------------------------

    @NotEmpty
    @Size(min = 4, max = 255)
    @Column(name = "login", nullable = false, unique = true)
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    // -- [password] ------------------------

    @NotEmpty
    @Size(max = 255)
    @Column(name = "`PASSWORD`", nullable = false)
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    // -- [email] ------------------------

    @NotEmpty
    @Size(max = 255)
    @Email
    @Column(nullable = false, unique = true)
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    // -- [isEnabled] ------------------------

    @Column(name = "is_enabled", length = 0)
    public Boolean getIsEnabled() {
        return isEnabled;
    }

    public void setIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
    }

    // -- [civility] ------------------------

    @Column(length = 2)
    @Enumerated(STRING)
    public CivilityEnum getCivility() {
        return civility;
    }

    public void setCivility(CivilityEnum civility) {
        this.civility = civility;
    }

    // -- [firstName] ------------------------

    @Size(max = 255)
    @Column(name = "FIRST_NAME")
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    // -- [lastName] ------------------------

    @Size(max = 255)
    @Column(name = "LAST_NAME")
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    // -- [photo using base64] ------------------------
    
    @Column(name = "PHOTO")
    public String getPhoto64() {
		return photo64;
	}

	public void setPhoto64(String photo64) {
		this.photo64 = photo64;
	}

	// -- [birthDate] ------------------------
	
	@NotNull
    @Column(name = "BIRTH_DATE", nullable = false, length = 19)
    @Temporal(TIMESTAMP)
    public Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    // --------------------------------------------------------------------
    // Many to Many
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-many: person ==> roles
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    /**
     * Returns the roles list.
     */
    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinTable(name = "person_role", joinColumns = @JoinColumn(name = "PERSON_ID"), inverseJoinColumns = @JoinColumn(name = "role_id"))
    @ManyToMany(cascade = CascadeType.ALL)
    public List<Role> getRoles() {
        return roles;
    }

    /**
     * Set the roles list.
     * <p>
     * It is recommended to use the helper method {@link #addRole(Role)} / {@link #removeRole(Role)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param roles the list of Role
     */
    public void setRoles(List<Role> roles) {
        this.roles = roles;
    }

    /**
     * Helper method to add the passed {@link Role} to the roles list.
     */
    public boolean addRole(Role role) {
        return getRoles().add(role);
    }

    /**
     * Helper method to remove the passed {@link Role} from the roles list.
     */
    public boolean removeRole(Role role) {
        return getRoles().remove(role);
    }

    /**
     * Helper method to determine if the passed {@link Role} is present in the roles list.
     */
    public boolean containsRole(Role role) {
        return getRoles() != null && getRoles().contains(role);
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object person) {
        if (this == person) {
            return true;
        }

        if (!(person instanceof Person)) {
            return false;
        }

        Person other = (Person) person;

        if (getEmail() == null) {
            if (other.getEmail() != null) {
                return false;
            }
        } else if (!getEmail().equals(other.getEmail())) {
            return false;
        }

        return true;
    }

    private volatile int previousHashCode = 0;

    /**
     * hashCode implementation using a business key.
     */
    @Override
    public int hashCode() {
        int result = 17;
        result = 31 * result + (getEmail() != null ? getEmail().hashCode() : 0);

        if (previousHashCode != 0 && previousHashCode != result) {
            log.warn("DEVELOPER: hashCode has changed!."
                    + "If you encounter this message you should take the time to carefuly review equals/hashCode for: "
                    + getClass().getCanonicalName());
        }

        previousHashCode = result;
        return result;
    }

    /**
     * Construct a readable string representation for this Person instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append("person.id=[").append(getId()).append("]\n");
        result.append("person.username=[").append(getUsername()).append("]\n");
        result.append("person.password=[").append(getPassword()).append("]\n");
        result.append("person.email=[").append(getEmail()).append("]\n");
        result.append("person.isEnabled=[").append(getIsEnabled()).append("]\n");
        result.append("person.civility=[").append(getCivility()).append("]\n");
        result.append("person.firstName=[").append(getFirstName()).append("]\n");
        result.append("person.lastName=[").append(getLastName()).append("]\n");
        result.append("person.birthDate=[").append(getBirthDate()).append("]\n"); 
        result.append("person.photo64=[").append(getPhoto64()).append("]\n");
        return result.toString();
    }
}