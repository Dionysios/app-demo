/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/test/java/manager/ManagerImplTest.e.vm.java
 */
package com.app.demo.service;

import static org.fest.assertions.Assertions.*;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.springframework.dao.InvalidDataAccessApiUsageException;

import com.app.demo.domain.Person;
import com.app.demo.service.PersonServiceImpl;
import com.app.demo.dao.PersonDao;
import com.app.demo.domain.enums.CivilityEnum;
import com.app.demo.dao.support.SearchTemplate;

/**
 * Unit test on PersonServiceImpl
 */
public class PersonServiceImplTest {

    private PersonServiceImpl personServiceImpl;
    private PersonDao personDao;

    @Before
    public void setUp() {
        // called before each test.
        personServiceImpl = new PersonServiceImpl();
        personDao = mock(PersonDao.class);
        personServiceImpl.setPersonDao(personDao);
    }

    @Test
    public void testFindUniqueOrNoneCaseNone() {
        List<Person> none = new ArrayList<Person>();

        when(personDao.find(any(Person.class), any(SearchTemplate.class))).thenReturn(none);

        Person result = personServiceImpl.findUniqueOrNone(new Person());

        assertThat(result).isNull();
        verify(personDao, times(1)).find(any(Person.class), any(SearchTemplate.class));
    }

    @Test
    public void testFindUniqueOrNoneCaseUnique() {
        List<Person> unique = new ArrayList<Person>();
        unique.add(new Person());

        when(personDao.find(any(Person.class), any(SearchTemplate.class))).thenReturn(unique);

        Person result = personServiceImpl.findUniqueOrNone(new Person());

        assertThat(result).isNotNull();
        verify(personDao, times(1)).find(any(Person.class), any(SearchTemplate.class));
    }

    @Test(expected = InvalidDataAccessApiUsageException.class)
    public void testFindUniqueOrNoneCaseMultiple() {
        List<Person> multiple = new ArrayList<Person>();
        multiple.add(new Person());
        multiple.add(new Person());

        when(personDao.find(any(Person.class), any(SearchTemplate.class))).thenReturn(multiple);

        personServiceImpl.findUniqueOrNone(new Person());
    }

    @Test(expected = InvalidDataAccessApiUsageException.class)
    public void testFindUniqueCaseNone() {
        List<Person> none = new ArrayList<Person>();

        when(personDao.find(any(Person.class), any(SearchTemplate.class))).thenReturn(none);

        personServiceImpl.findUnique(new Person());
    }

    @Test
    public void testFindUniqueCaseUnique() {
        List<Person> unique = new ArrayList<Person>();
        unique.add(new Person());

        when(personDao.find(any(Person.class), any(SearchTemplate.class))).thenReturn(unique);

        Person result = personServiceImpl.findUnique(new Person());

        assertThat(result).isNotNull();
        verify(personDao, times(1)).find(any(Person.class), any(SearchTemplate.class));
    }

    @Test(expected = InvalidDataAccessApiUsageException.class)
    public void testFindUniqueCaseMultiple() {
        List<Person> multiple = new ArrayList<Person>();
        multiple.add(new Person());
        multiple.add(new Person());

        when(personDao.find(any(Person.class), any(SearchTemplate.class))).thenReturn(multiple);

        personServiceImpl.findUnique(new Person());
    }
}