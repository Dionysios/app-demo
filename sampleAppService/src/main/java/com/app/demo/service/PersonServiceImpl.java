/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/manager/ManagerImpl.e.vm.java
 */
package com.app.demo.service;

import java.util.List;

import org.apache.log4j.Logger;
import org.hibernate.Criteria;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.app.demo.dao.support.GenericDao;
import com.app.demo.dao.support.NamedQueryUtil;
import com.app.demo.dao.support.SearchTemplate;
import com.app.demo.service.support.GenericEntityServiceImpl;
import com.app.demo.domain.Person;
import com.app.demo.dao.PersonDao;

/**
 *
 * Default implementation of the {@link PersonService} interface
 * @see PersonService
 */
@Service("personService")
public class PersonServiceImpl extends GenericEntityServiceImpl<Person, String> implements PersonService {

    @SuppressWarnings("unused")
    private static final Logger log = Logger.getLogger(PersonServiceImpl.class);

    protected PersonDao personDao;

    @Autowired
    private NamedQueryUtil namedQueryUtil;
    
    @Autowired
    public void setPersonDao(PersonDao personDao) {
        this.personDao = personDao;
    }

    /**
     * Dao getter used by the {@link GenericEntityServiceImpl}.
     */
    @Override
    public GenericDao<Person, String> getDao() {
        return personDao;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Person getNew() {
        return new Person();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Person getNewWithDefaults() {
        Person result = getNew();
        result.initDefaultValues();
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public Person get(Person model) {
        if (model == null) {
            return null;
        }

        if (model.isIdSet()) {
        	model.getRoles().size();
            return super.get(model);
        }

        if (model.getUsername() != null && !model.getUsername().isEmpty()) {
            Person result = getByUsername(model.getUsername());
            if (result != null) {
            	result.getRoles().size();
                return result;
            }
        }

        if (model.getEmail() != null && !model.getEmail().isEmpty()) {
            Person result = getByEmail(model.getEmail());
            if (result != null) {
            	result.getRoles().size();
                return result;
            }
        }

        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public Person getByUsername(String _username) {
        Person person = new Person();
        person.setUsername(_username);
        return findUniqueOrNone(person);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void deleteByUsername(String username) {
        delete(getByUsername(username));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public Person getByEmail(String _email) {
        Person person = new Person();
        person.setEmail(_email);
        return findUniqueOrNone(person);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void deleteByEmail(String email) {
        delete(getByEmail(email));
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
	@SuppressWarnings("unchecked")
	public List<Person> findPersonsWithAssociation(Person person,
			SearchTemplate searchTemplate) {
		Criteria criteria = personDao.getCriteria(person, searchTemplate);
		if (criteria != null && criteria.list() != null) {
			for (Person p : (List<Person>)criteria.list()) {
				p.getRoles().size();
			}
			return criteria.list();
		} else
			return null;
	}
	
    /**
     * {@inheritDoc}
     */
    @Override
	@Transactional(readOnly = true)
	public Person getPersonWithAssociation(Person person){
    	Criteria criteria = personDao.getCriteria(person, new SearchTemplate().setMaxResults(1));
		if (criteria != null && criteria.list() != null){
			person = (Person) criteria.list().get(0);
			person.getRoles().size();
			return  person;
		}else
			return null;
		
	}
    
    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public List<Person> findWithAssociation(Person person, SearchTemplate searchTemplate){
    	List<Person> persons =  find(person,searchTemplate);
    	for (Person p : persons) {
			p.getRoles().size();
		}
    	return persons;
    }
}