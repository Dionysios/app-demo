/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/test/java/hibernate/DAOHibernateTest.e.vm.java
 */
package com.app.demo.dao;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;

import org.hibernate.Criteria;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Projection;
import org.hibernate.Session;

import com.app.demo.dao.support.NamedQueryUtil;
import com.app.demo.dao.support.SearchTemplate;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import static org.fest.assertions.Assertions.*;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import com.app.demo.domain.*;
import com.app.demo.util.*;

/**
 * Unit test on PersonDaoImpl
 */
public class PersonDaoImplTest {

    public PersonDaoImpl personDao;
    public EntityManager entityManager;
    public Session session;
    public NamedQueryUtil namedQueryUtil;
    public MockCriteriaUtil criteriaUtil;

    @Before
    public void setUp() {
        entityManager = mock(EntityManager.class);
        session = mock(Session.class);
        namedQueryUtil = mock(NamedQueryUtil.class);
        criteriaUtil = new MockCriteriaUtil();

        personDao = new PersonDaoImpl();
        personDao.setEntityManager(entityManager);
        personDao.setNamedQueryUtil(namedQueryUtil);
    }

    @Test
    public void testGetReturnsNonNullWhenPkIsSet() {
        Person model = new Person();
        model.setId(ValueGenerator.getUniqueString(32));

        when(entityManager.find(eq(Person.class), any())).thenReturn(model);

        Person result = personDao.get(model);

        assertThat(result).isNotNull();
        verify(entityManager, times(1)).find(eq(Person.class), any());
    }

    @Test
    public void testGetReturnsNullWhenPkIsSet() {
        Person model = new Person();
        model.setId(ValueGenerator.getUniqueString(32));

        when(entityManager.find(eq(Person.class), any())).thenReturn(null);

        Person result = personDao.get(model);

        assertThat(result).isNull();
        verify(entityManager, times(1)).find(eq(Person.class), any());
    }

    @Test
    public void testSave() {
        List<Person> persons = new ArrayList<Person>();
        persons.add(new Person());
        persons.add(new Person());

        personDao.save(persons);

        verify(entityManager, times(2)).persist(any());
    }

    @Test
    public void testDelete() {
        Person model1 = new Person();
        model1.setId(ValueGenerator.getUniqueString(32));

        Person model2 = new Person();
        model2.setId(ValueGenerator.getUniqueString(32));

        List<Person> persons = new ArrayList<Person>();
        persons.add(model1);
        persons.add(model2);

        when(entityManager.contains(any())).thenReturn(true);

        personDao.delete(persons);

        verify(entityManager, times(2)).remove(any());
    }

    @Test
    public void testFindUseNamedQueryUtil() {
        Person model = new Person();
        SearchTemplate searchTemplate = new SearchTemplate();
        searchTemplate.setNamedQuery("myNamedQuery");
        List<Person> persons = new ArrayList<Person>();

        when(namedQueryUtil.findByNamedQuery(any(SearchTemplate.class), any())).thenReturn((List) persons);

        List<Person> result = personDao.find(model, searchTemplate);

        assertThat(result).isSameAs(persons);
        verify(namedQueryUtil, times(1)).findByNamedQuery(any(SearchTemplate.class), any());

    }

    @Test
    public void testFindCountUseNamedQueryUtil() {
        final int expectedResult = 10;
        Person model = new Person();
        SearchTemplate searchTemplate = new SearchTemplate();
        searchTemplate.setNamedQuery("myNamedQuery");

        when(namedQueryUtil.numberByNamedQuery(any(SearchTemplate.class), any())).thenReturn(expectedResult);

        int result = personDao.findCount(model, searchTemplate);

        assertThat(result).isEqualTo(expectedResult);
        verify(namedQueryUtil, times(1)).numberByNamedQuery(any(SearchTemplate.class), any());
    }

    @Test
    public void testFindCountCaseNullResultCriteria() {
        Person model = new Person();
        SearchTemplate searchTemplate = new SearchTemplate();
        searchTemplate.setCacheable(false);

        Criteria criteria = criteriaUtil.prepareThenReturnCriteria(entityManager, session, Person.class);
        when(criteria.uniqueResult()).thenReturn(null);

        int result = personDao.findCount(model, searchTemplate);

        assertThat(result).isEqualTo(0);
        verify(criteria, times(1)).uniqueResult();
    }

    @Test
    public void testFindCountCaseNotNullResultCriteria() {
        final int expectedResult = 10;
        Person model = new Person();
        SearchTemplate searchTemplate = new SearchTemplate();
        searchTemplate.setCacheable(false);

        Criteria criteria = criteriaUtil.prepareThenReturnCriteria(entityManager, session, Person.class);
        when(criteria.uniqueResult()).thenReturn(expectedResult);

        int result = personDao.findCount(model, searchTemplate);

        assertThat(result).isEqualTo(expectedResult);
        verify(criteria, times(1)).uniqueResult();
    }

    @Test
    public void testGetLocalSearchTemplateWithNullSearchTemplate() {
        String cacheRegion = "cacheRegion";
        boolean cacheable = true;
        personDao.setCacheable(cacheable);
        personDao.setCacheRegion(cacheRegion);

        SearchTemplate result = personDao.getLocalSearchTemplate(null);

        assertThat(result.getCacheRegion()).isEqualTo(cacheRegion);
        assertThat(result.isCacheable()).isEqualTo(cacheable);
    }

    @Test
    public void testGetLocalSearchTemplateWithDefaultSearchTemplate() {
        String cacheRegion = "cacheRegion";
        boolean cacheable = true;
        personDao.setCacheable(cacheable);
        personDao.setCacheRegion(cacheRegion);
        SearchTemplate defaultSearchTemplate = new SearchTemplate().setCacheable(null);

        SearchTemplate result = personDao.getLocalSearchTemplate(defaultSearchTemplate);

        assertThat(result.getCacheRegion()).isEqualTo(cacheRegion);
        assertThat(result.isCacheable()).isEqualTo(cacheable);
    }

    @Test
    public void testGetLocalSearchTemplateWithNormalSearchTemplate() {
        String normalCacheRegion = "normalcacheRegion";
        boolean normalCacheable = false;
        personDao.setCacheable(true);
        personDao.setCacheRegion("cacheRegion");

        SearchTemplate normalSearchTemplate = new SearchTemplate();
        normalSearchTemplate.setCacheable(normalCacheable);
        normalSearchTemplate.setCacheRegion(normalCacheRegion);

        SearchTemplate result = personDao.getLocalSearchTemplate(normalSearchTemplate);

        assertThat(result.getCacheRegion()).isEqualTo(normalCacheRegion);
        assertThat(result.isCacheable()).isEqualTo(normalCacheable);
    }
}